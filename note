### Creating New GitHub Repository ###
# Git commands for GitHub repository creation.
# NOTE: Choose the directory for your local repository carefully! Git commands will work ONLY in this directory for your remote counterpart.
echo "# Repo name" >> README.md
git init
git add README.md
git commit -m "first commit"
git branch -M main
git remote add origin https://github.com/Nolanderfield/CDP.org.git
git push -u origin main

### Signing Commits ###
# When committing changes in your local branch, adding the -S flag creates a signed commit;
git commit -S -m "YOUR_COMMIT_MESSAGE"

# To configure your Git client to sign commits by default for a local repository, in Git versions 2.0.0 and above, run;
git config commit.gpgsign true

# To sign all commits by default in any local repository on your computer, run;
git config --global commit.gpgsign true

### Branch Create/Switch/Merge/Delete ###
# Create a new branch, example, to create a branch called new-branch;
git checkout -b new-branch

# Create a new branch from a commit.
# Example, a commit labeled 3ba638b from the reflog examples below.
git checkout -b new-branch 3ba638b

# To view commits;
git reflog

# Example of what commits look like from reflog;
3ba638b HEAD@{14}: commit: Improved index.html and styles.css. Renamed styles.css to style.css, and then added script.js. Minor change to README.md
f8212a3 HEAD@{15}: pull origin main (start): checkout f8212a345de03439fa69a30633729167fc0debe4
ab3d032 HEAD@{16}: checkout: moving from f8212a345de03439fa69a30633729167fc0debe4 to main
f8212a3 HEAD@{17}: pull origin main: Fast-forward

# Switch from main branch, or whatever branch you're currently on, to new-branch:
git checkout new-branch

# Switching from new-branch, or whatever branch you're currently on, to the main branch:
git checkout main

# Merge commits from branches, for example new-branch to main branch.
# NOTE: To accomplish this example, you first must be on the main branch.
git merge new-branch

# Merge the remote changes into your local branch:
git merge origin/main

# To FORCE Merge the remote changes into your local branch, use the --allow-unrelated-histories option:
git merge --allow-unrelated-histories origin/main

# Delete a branch, example delete the new-branch:
git branch -d new-branch

# Delete a branch forcefully, example delete the new-branch forcefully:
git branch -D new-branch

# If you want to ensure the commit is removed from the repository, you can run:
git reflog expire --expire=now --all
git gc --prune=now

### Example Workflow ###
# Make changes to your files
Typing really fast. Creating files. Working really hard. Being amazing!

# Stage the changes
# If you created a file/directory or made modifications inside a file, use git add.
# Example, created a file called index.html, modified a file called script.js, and created a directory called project;
git add index.html script.js project

# If you deleted a file/directory, use git rm.
# Example, deleted a file called style.css and deleted a directory called docs
git rm style.css docs

# If you change a file/directory name or move a file/directory, use git mv.
# Examples,
# Renamed a file called test.html to index.html
# Renamed a directory called fake to real
# Moved a file called note.txt into a directory called Documents
git mv test.html index.html
git mv fake real
git mv note.txt Documents/note.txt

# Or, to stage all changes, including created/deleted/modified/name-changed/etc., run;
git add .

# Commit the changes. This allows the changes you have made in your local repo to be merged with the remote repo when you use git pull.
git commit -m "Your commit message describing the changes"

# Pull the latest changes from the remote repository. This merges the work that you staged and commited in your local repo with it's remote counterpart.
git pull origin main

# If there are any merge conflicts, resolve them manually, stage the resolved files, and commit the changes
# Example, after running git pull origin main, you have these conflicts,
# Your local repository index.html file has conflicts with the remote repository index.html file.
# Your local repository README.md file has conflicts with the remote repository README.md file.
# Resolve them manually, meaning, open each file with a text editor of your choice and fix the conflicts by either removing remote content or local content.
# Once the files are resolved, stage them, again by running;
git add index.html README.md
# Now that you have staged them, you must commit them, again with a message by running;
git commit -m "Resolved conflicts in the index.html and README.md files"

# Push the changes to the remote repository. This will move everything, including your work, to the remote repository.
# Your local repository and the remote repository will be exact, in sync. Others can now work off your efforts and you can continue working off it as well.
git push origin main

# Other examples from past efforts
git fetch origin
git diff origin/main
git merge origin/main
git add .
git commit -m "Update files and add new important file"
git push origin main

cd /home/blippy/repos/CDP
git fetch origin
git diff origin/main
git mv styles.css style.css
git add index.html style.css script.js
git commit -m "Improved index.html and styles.css. Renamed styles.css to style.css, and then added script.js"
git push origin main

git checkout main
git pull origin main
git push origin main
